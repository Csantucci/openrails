 Source/RunActivity/RunActivity.csproj              |   4 +
 .../Viewer3D/WebServices/TrainDpuDisplay.cs        | 292 +++++++++++++++++++++
 .../Viewer3D/WebServices/Web/TrainDpu/index.css    |  93 +++++++
 .../Viewer3D/WebServices/Web/TrainDpu/index.html   |  39 +++
 .../Viewer3D/WebServices/Web/TrainDpu/index.js     | 208 +++++++++++++++
 .../Viewer3D/WebServices/Web/index.html            |  15 +-
 .../RunActivity/Viewer3D/WebServices/WebServer.cs  |   5 +
 7 files changed, 649 insertions(+), 7 deletions(-)

diff --git a/Source/RunActivity/RunActivity.csproj b/Source/RunActivity/RunActivity.csproj
index beb4f0b89..20e3fe442 100644
--- a/Source/RunActivity/RunActivity.csproj
+++ b/Source/RunActivity/RunActivity.csproj
@@ -206,6 +206,7 @@
     <Compile Include="Viewer3D\Weather.cs" />
     <Compile Include="Viewer3D\WebServices\ControlValue.cs" />
     <Compile Include="Viewer3D\WebServices\TrackMonitorDisplay.cs" />
+    <Compile Include="Viewer3D\WebServices\TrainDpuDisplay.cs" />
     <Compile Include="Viewer3D\WebServices\TrainDrivingDisplay.cs" />
     <Compile Include="Viewer3D\WebServices\TrainInfo.cs" />
     <Compile Include="Viewer3D\WebServices\WebServer.cs" />
@@ -800,6 +801,9 @@
     <Content Include="Viewer3D\WebServices\Web\TrackMonitorTrainDriving\index.js" />
     <Content Include="Viewer3D\WebServices\Web\TrackMonitor\SignalAspects.png" />
     <Content Include="Viewer3D\WebServices\Web\TrackMonitor\TrackMonitorImages.png" />
+    <Content Include="Viewer3D\WebServices\Web\TrainDpu\index.css" />
+    <Content Include="Viewer3D\WebServices\Web\TrainDpu\index.html" />
+    <Content Include="Viewer3D\WebServices\Web\TrainDpu\index.js" />
     <Content Include="Viewer3D\WebServices\Web\TrainDriving\index.css" />
     <Content Include="Viewer3D\WebServices\Web\TrainDriving\index.html" />
     <Content Include="Viewer3D\WebServices\Web\TrainDriving\index.js" />
diff --git a/Source/RunActivity/Viewer3D/WebServices/TrainDpuDisplay.cs b/Source/RunActivity/Viewer3D/WebServices/TrainDpuDisplay.cs
new file mode 100644
index 000000000..764e0bc95
--- /dev/null
+++ b/Source/RunActivity/Viewer3D/WebServices/TrainDpuDisplay.cs
@@ -0,0 +1,292 @@
+ï»¿// COPYRIGHT 2019, 2020 by the Open Rails project.
+//
+// This file is part of Open Rails.
+//
+// Open Rails is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Open Rails is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Open Rails.  If not, see <http://www.gnu.org/licenses/>.
+
+using Orts.Simulation.Physics;
+using Orts.Simulation.RollingStocks;
+using Orts.Simulation.RollingStocks.SubSystems.Brakes;
+using ORTS.Common;
+using ORTS.Common.Input;
+using System;
+using System.Collections.Generic;
+using System.Drawing;
+using System.Linq;
+
+namespace Orts.Viewer3D.WebServices
+{
+    public static class TrainDpuDisplay
+    {
+        /// <summary>
+        /// A Train Dpu row with data fields.
+        /// </summary>
+        public struct ListLabel
+        {
+            public string FirstCol;
+            //public int FirstColWidth;
+            public List<string> LastCol;
+            //public List<int> LastColWidth;
+            public List<string> SymbolCol;
+            //public bool ChangeColWidth;
+            //public string KeyPressed;
+        }
+
+        private static bool normalVerticalMode = true;// vertical window size
+        private static int dieselLocomotivesCount = 0;
+
+        /// <summary>
+        /// Table of Colors to client-side color codes.
+        /// </summary>
+        /// <remarks>
+        /// Compare codes with index.css.
+        /// </remarks>
+        private static readonly Dictionary<Color, string> ColorCode = new Dictionary<Color, string>
+        {
+            { Color.Yellow, "???" },
+            { Color.Green, "??!" },
+            { Color.Black, "?!?" },
+            { Color.PaleGreen, "?!!" },
+            { Color.White, "!??" },
+            { Color.Orange, "!!?" },
+            { Color.OrangeRed, "!!!" },
+            { Color.Cyan, "%%%" },
+            { Color.Brown, "%$$" },
+            { Color.LightGreen, "%%$" },
+            { Color.Blue, "$%$" },
+            { Color.LightSkyBlue, "$$$" },
+        };
+
+        private static class Symbols
+        {
+            public const string Fence = "\u2590";
+        }
+
+        private static readonly Dictionary<string, string> FirstColToAbbreviated = new Dictionary<string, string>()
+        {
+            [Viewer.Catalog.GetString("Flow")] = Viewer.Catalog.GetString("FLOW"),//
+            [Viewer.Catalog.GetString("Fuel")] = Viewer.Catalog.GetString("FUEL"),//
+            [Viewer.Catalog.GetString("Load")] = Viewer.Catalog.GetString("LOAD"),//
+            [Viewer.Catalog.GetString("Loco Groups")] = Viewer.Catalog.GetString("GRUP"),
+            [Viewer.Catalog.GetString("Oil Pressure")] = Viewer.Catalog.GetString("OIL"),//
+            [Viewer.Catalog.GetString("Power")] = Viewer.Catalog.GetString("POWR"),//
+            [Viewer.Catalog.GetString("Remote")] = Viewer.Catalog.GetString("RMT"),//
+            [Viewer.Catalog.GetString("RPM")] = Viewer.Catalog.GetString("RPM"),//
+            [Viewer.Catalog.GetString("Reverser")] = Viewer.Catalog.GetString("REVR"),//
+            [Viewer.Catalog.GetString("Status")] = Viewer.Catalog.GetString("STAT"),//
+            [Viewer.Catalog.GetString("Temperature")] = Viewer.Catalog.GetString("TEMP"),//
+            [Viewer.Catalog.GetString("Throttle")] = Viewer.Catalog.GetString("THRO"),//
+            [Viewer.Catalog.GetString("Time")] = Viewer.Catalog.GetString("TIME"),//
+            [Viewer.Catalog.GetString("Tractive Effort")] = Viewer.Catalog.GetString("TRACT")//
+        };
+
+        private static readonly Dictionary<string, string> LastColToAbbreviated = new Dictionary<string, string>()
+        {
+            [Viewer.Catalog.GetString("Forward")] = Viewer.Catalog.GetString("Forw."),
+            [Viewer.Catalog.GetString("Idle")] = Viewer.Catalog.GetString("Idle"),
+            [Viewer.Catalog.GetString("Running")] = Viewer.Catalog.GetString("Runn")
+        };
+
+
+        /// <summary>
+        /// Sanitize the fields of a <see cref="ListLabel"/> in-place.
+        /// </summary>
+        /// <param name="label">A reference to the <see cref="ListLabel"/> to check.</param>
+        private static void CheckLabel(ref ListLabel label, bool normalMode)
+        {
+            void CheckString(ref string s) => s = s ?? "";
+            CheckString(ref label.FirstCol);
+
+            if (label.LastCol != null)
+            {
+                for (int i = 0; i < label.LastCol.Count; i++)
+                {
+                    var LastCol = label.LastCol[i];
+                    CheckString(ref LastCol);
+                    label.LastCol[i] = LastCol;
+                }
+            }
+
+            if (label.SymbolCol != null)
+            {
+                for (int i = 0; i < label.SymbolCol.Count; i++)
+                {
+                    var symbolCol = label.SymbolCol[i];
+                    CheckString(ref symbolCol);
+                    label.SymbolCol[i] = symbolCol;
+                }
+            }
+
+            if (!normalMode)
+            {
+                foreach (KeyValuePair<string, string> mapping in FirstColToAbbreviated)
+                    label.FirstCol = label.FirstCol.Replace(mapping.Key, mapping.Value);
+                foreach (KeyValuePair<string, string> mapping in LastColToAbbreviated)
+                {
+                    if (label.LastCol != null)
+                    {
+                        for (int i = 0; i < label.LastCol.Count; i++)
+                        {
+                            label.LastCol[i] = label.LastCol[i].Replace(mapping.Key, mapping.Value);
+                        }
+                    }
+                }
+            }
+        }
+
+        /// <summary>
+        /// Retrieve a formatted list <see cref="ListLabel"/>s to be displayed as an in-browser Track Monitor.
+        /// </summary>
+        /// <param name="viewer">The Viewer to read train data from.</param>
+        /// <returns>A list of <see cref="ListLabel"/>s, one per row of the popup.</returns>
+        public static IEnumerable<ListLabel> TrainDpuDisplayList(this Viewer viewer, bool normalTextMode = true)
+        {
+            bool useMetric = viewer.MilepostUnitsMetric;
+            var labels = new List<ListLabel>();
+
+            void AddLabel(ListLabel label)
+            {
+                CheckLabel(ref label, normalTextMode);
+                labels.Add(label);
+            }
+            void AddSeparator() => AddLabel(new ListLabel
+            {
+                FirstCol = "Sprtr",
+            });
+
+            TrainCar trainCar = viewer.PlayerLocomotive;
+            Train train = trainCar.Train;
+            MSTSLocomotive locomotive = (MSTSLocomotive)trainCar;
+            var multipleUnitsConfiguration = locomotive.GetMultipleUnitsConfiguration();
+            List<string> lastCol;
+            List<string> symbolCol;
+            var notDpuTrain = false;
+
+            // Distributed Power
+            if (multipleUnitsConfiguration != null)
+            {
+                lastCol = new List<string>();
+                symbolCol = new List<string>();
+                char[] multipleUnits = multipleUnitsConfiguration.Replace(" ", "").ToCharArray();
+                symbolCol.Add("");//first symbol empty
+                foreach (char ch in multipleUnits)
+                {
+                    if (ch.ToString() != " ")
+                    {
+                        if (Char.IsDigit(ch))
+                        {
+                            lastCol.Add(ch.ToString()); continue;
+                        }
+                        else
+                            symbolCol.Add(ch == '|' ? Symbols.Fence + ColorCode[Color.Green] : ch == 'â' ? ch.ToString() : "");
+                    }
+                }
+
+                // allows to draw the second fence
+                lastCol.Add("");
+                symbolCol.Add("");
+                AddLabel(new ListLabel
+                {
+                    FirstCol = Viewer.Catalog.GetString("Loco Groups"),
+                    SymbolCol = symbolCol,
+                    LastCol = lastCol
+                });
+                AddSeparator();
+            }
+            else
+            {
+                lastCol = new List<string>();
+                symbolCol = new List<string>();
+                lastCol.Add("");
+                symbolCol.Add("");
+                AddLabel(new ListLabel
+                {
+                    FirstCol = Viewer.Catalog.GetString(" Distributed power management not available with this player train. "),
+                    SymbolCol = symbolCol,
+                    LastCol = lastCol
+                });
+                notDpuTrain = true;
+            }
+
+            if (locomotive != null && !notDpuTrain)
+            {
+                int numberOfDieselLocomotives = 0;
+                int maxNumberOfEngines = 0;
+                for (var i = 0; i < train.Cars.Count; i++)
+                {
+                    if (train.Cars[i] is MSTSDieselLocomotive)
+                    {
+                        numberOfDieselLocomotives++;
+                        maxNumberOfEngines = Math.Max(maxNumberOfEngines, (train.Cars[i] as MSTSDieselLocomotive).DieselEngines.Count);
+                    }
+                }
+                if (numberOfDieselLocomotives > 0)
+                {
+                    var dieselLoco = MSTSDieselLocomotive.GetDpuHeader(normalVerticalMode, numberOfDieselLocomotives, maxNumberOfEngines).Replace("\t", "");
+                    string[] dieselLocoHeader = dieselLoco.Split('\n');
+                    string[,] tempStatus = new string[numberOfDieselLocomotives, dieselLocoHeader.Length];
+                    var k = 0;
+                    var dpUnitId = 0;
+                    var dpUId = -1;
+                    for (var i = 0; i < train.Cars.Count; i++)
+                    {
+                        if (train.Cars[i] is MSTSDieselLocomotive)
+                        {
+                            if (dpUId != (train.Cars[i] as MSTSLocomotive).DPUnitID)
+                            {
+                                var status = (train.Cars[i] as MSTSDieselLocomotive).GetDpuStatus(normalVerticalMode).Split('\t');
+                                var fence = ((dpUnitId != (dpUnitId = train.Cars[i].RemoteControlGroup)) ? "|" : " ");
+                                for (var j = 0; j < status.Length; j++)
+                                {
+                                    // fence
+                                    tempStatus[k, j] = fence + status[j];
+                                }
+                                dpUId = (train.Cars[i] as MSTSLocomotive).DPUnitID;
+                                k++;
+                            }
+                        }
+                    }
+
+                    dieselLocomotivesCount = k;// only leaders loco group
+                    for (var j = 0; j < dieselLocoHeader.Count(); j++)
+                    {
+                        lastCol = new List<string>();
+                        symbolCol = new List<string>();
+
+                        for (int i = 0; i < dieselLocomotivesCount; i++)
+                        {
+                            symbolCol.Add(tempStatus[i, j] != null && tempStatus[i, j].Contains("|") ? Symbols.Fence + ColorCode[Color.Green] : " ");
+                            lastCol.Add(tempStatus[i, j]);
+                        }
+
+                        // allows to draw the second fence
+                        lastCol.Add("");
+                        symbolCol.Add(" ");
+
+                        AddLabel(new ListLabel
+                        {
+                            FirstCol = dieselLocoHeader[j],
+                            SymbolCol = symbolCol,
+                            LastCol = lastCol
+                        });
+                    }
+                }
+                AddLabel(new ListLabel());
+            }
+
+            AddLabel(new ListLabel());
+            return labels;
+        }
+    }
+}
diff --git a/Source/RunActivity/Viewer3D/WebServices/Web/TrainDpu/index.css b/Source/RunActivity/Viewer3D/WebServices/Web/TrainDpu/index.css
new file mode 100644
index 000000000..3812f6d93
--- /dev/null
+++ b/Source/RunActivity/Viewer3D/WebServices/Web/TrainDpu/index.css
@@ -0,0 +1,93 @@
+#table {
+	padding: 20px;
+	border: 2px;
+	border-spacing: 2px;
+}
+
+table td{
+	color :	white;
+}
+
+/* Apply rounded border */
+.border{
+	border-spacing: 0;
+	border: gray 2px solid;
+	border-radius: 20px;
+
+}
+
+.button{
+	border: gray 2px solid;
+	border-radius: 20px;
+	text-align: center;
+	width: 50px;
+	margin: 4px 2px;
+}
+
+/* Allows to apply text color */
+td[ColorCode= "???"]{
+	background-color:black;
+	color:yellow;
+}
+td[ColorCode= "??!"]{
+	background-color:black;
+	color:Green;
+}
+td[ColorCode= "?!?"]{
+	background-color:black;
+	color:Black;
+}
+td[ColorCode= "?!!"]{
+	background-color:black;
+	color:PaleGreen;
+}
+td[ColorCode= "!??"]{
+	background-color:black;
+	color:White;
+}
+td[ColorCode= "!!?"]{
+	background-color:black;
+	color:Orange;
+}
+td[ColorCode= "!!!"]{
+	background-color:black;
+	color:OrangeRed;
+}
+td[ColorCode= "%%%"]{
+	background-color:black;
+	color:Cyan;
+}
+td[ColorCode= "%$$"]{
+	background-color: black;
+	color:brown;
+}
+td[ColorCode= "%%$"]{
+	background-color: black;
+	color:lightgreen;
+}
+td[ColorCode= "$%$"]{
+	background-color: black;
+	color:blue;
+}
+td[ColorCode= "$$$"]{
+	background-color:black;
+	color:LightSkyBlue;
+}
+
+/* Separator between diferent info area*/
+.separator{
+	border-bottom: 1px solid gray;
+}
+.separatorred{
+	border-bottom: 1px solid red;
+}
+.separatordarkgray{
+	border-bottom: 1px solid darkgray;
+}
+
+/* Developer: Used as help for cells alignement*/
+td {
+	/*border: black 1px solid;
+	border-spacing: 0;
+	border-radius: 7px;
+}
\ No newline at end of file
diff --git a/Source/RunActivity/Viewer3D/WebServices/Web/TrainDpu/index.html b/Source/RunActivity/Viewer3D/WebServices/Web/TrainDpu/index.html
new file mode 100644
index 000000000..651ddec96
--- /dev/null
+++ b/Source/RunActivity/Viewer3D/WebServices/Web/TrainDpu/index.html
@@ -0,0 +1,39 @@
+<!DOCTYPE HTML>
+<!--
+COPYRIGHT 2009, 2010, 2011, 2012, 2013, 2014 by the Open Rails project.
+
+This file is part of Open Rails.
+
+Open Rails is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
+(at your option) any later version.
+
+Open Rails is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with Open Rails.  If not, see <http://www.gnu.org/licenses/>.
+-->
+<html lang="en">
+<head>
+  <meta charset="utf-8"/>
+  <meta name="viewport" content="width=device-width, initial-scale=1.0"><!-- adds zooming for mobiles -->
+  <title>OR: Train DPU API</title>
+  <link rel="shortcut icon" type="image/png" href="/or_logo.png"><!-- This icon appears in the page's tab and its bookmark. -->
+  <link rel="stylesheet" type="text/css" href="/index.css"><!-- share styles with home page -->
+	<link rel="stylesheet" type="text/css" href="index.css">
+</head>
+
+<body id="body" onload="setInterval (ApiTrainDpu, 500)">
+  <div id=menu><a href="/">Back to Menu</a></div>
+  <div>
+    <br/>
+    <button class="button" onclick="changePageColor()" id="buttonDN">Day</button>
+    <table class="border" style="background-color:black;" id="TrainDpu"></table>
+  </div>
+  <script src="index.js"></script>
+</body>
+</html>
\ No newline at end of file
diff --git a/Source/RunActivity/Viewer3D/WebServices/Web/TrainDpu/index.js b/Source/RunActivity/Viewer3D/WebServices/Web/TrainDpu/index.js
new file mode 100644
index 000000000..b0c0229df
--- /dev/null
+++ b/Source/RunActivity/Viewer3D/WebServices/Web/TrainDpu/index.js
@@ -0,0 +1,208 @@
+ï»¿// COPYRIGHT 2009, 2010, 2011, 2012, 2013, 2014 by the Open Rails project.
+//
+// This file is part of Open Rails.
+//
+// Open Rails is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Open Rails is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Open Rails.  If not, see <http://www.gnu.org/licenses/>.
+//
+// Based on original work by Dan Reynolds 2017-12-21
+
+// Using XMLHttpRequest rather than fetch() as:
+// 1. it is more widely supported (e.g. Internet Explorer and various tablets)
+// 2. It doesn't hide some returning error codes
+// 3. We don't need the ability to chain promises that fetch() offers.
+
+var hr = new XMLHttpRequest;
+var httpCodeSuccess = 200;
+var xmlHttpRequestCodeDone = 4;
+var normalTextMode = true;
+
+function ApiTrainDpu() {
+	// GET to fetch data, POST to send it
+	// "/API/APISAMPLE" /API is a prefix hard-coded into the WebServer class
+	hr.open("GET", `/API/TRAINDPUDISPLAY?normalText=${normalTextMode}`, true);
+	hr.send();
+
+	hr.onreadystatechange = function () {
+		if (this.readyState == xmlHttpRequestCodeDone && this.status == httpCodeSuccess) {
+			var obj = JSON.parse(hr.responseText);
+			if (obj != null) // Can happen using IEv11
+			{
+				Str = "<table>";
+				var endIndexFirst = 0,
+					endIndexLast = [],
+					endIndexSymbol = [];
+
+				var	newDataFirst = "",
+					newDataLast = [],
+					newDataSymbol = [],
+					smallSymbolColor = [],
+					stringColorFirst = "",
+					stringColorLast = [];
+
+				// Color codes
+				var codeColor = ['???','??!','?!?','?!!','!??','!!?','!!!','%%%','$$$'];
+				var Fence = "\u2590";
+
+				// Table title
+				var colspanValue = obj[0].LastCol.length + 5;
+				Str += "<tr> <td colspan='" + colspanValue + "' style='text-align: center'>" + 'Train DPU Info' + "</td></tr>";
+				Str += "<tr> <td colspan='" + colspanValue + "' class='separator'></td></tr>";
+
+				// Customize data
+				for (const data of obj) {
+					if (data.FirstCol != "" && data.LastCol != null && data.SymbolCol != null) {
+						Str += "<tr>";
+						firstColor = false;
+						let lastColor = [];
+						let symbolColor = [];
+						var n = 0;
+						for (const dataCol of obj[0].LastCol) {
+							lastColor[n] = false;
+							symbolColor[n] = false;
+							n++;
+						}
+						keyColor = false;
+
+						// FirstCol
+						if (data.FirstCol != null) {
+							endIndexFirst = data.FirstCol.length;
+							newDataFirst = data.FirstCol.slice(0, endIndexFirst - 3);
+							stringColorFirst = data.FirstCol.slice(-3);
+						}
+
+						// LastCol
+						if (data.LastCol != null) {
+							n = 0;
+							for (const dataCol of data.LastCol) {
+								endIndexLast[n] = dataCol.length;
+								newDataLast[n] = dataCol.slice(0, endIndexLast[n] - 3);
+								stringColorLast[n] = dataCol.slice(-3);
+								n++;
+							}
+						}
+
+						// smallSymbol
+						if (data.SymbolCol != null) {
+							n = 0;
+							for (const dataSymbol of data.SymbolCol) {
+								endIndexSymbol[n] = dataSymbol.length;
+								newDataSymbol[n] = dataSymbol.slice(0, endIndexSymbol[n] - 3);
+								smallSymbolColor[n] = dataSymbol.slice(-3);
+								n++;
+							}
+						}
+
+						// detects color
+						if (codeColor.indexOf(stringColorFirst) != -1) { firstColor = true; }
+						//detect color inside array
+						if (data.LastCol != null) {
+							n = 0;
+							for (const dataCol of data.LastCol) {
+								if (codeColor.indexOf(stringColorLast[n]) != -1) { lastColor[n] = true; }
+								n++;
+							}
+						}
+						if (data.SymbolCol != null) {
+							n = 0;
+							for (const dataSymbol of data.SymbolCol) {
+								if (codeColor.indexOf(smallSymbolColor[n]) != -1) { symbolColor[n] = true; }
+								n++;
+							}
+						}
+
+						if (data.FirstCol == null) {
+							Str += "<td></td>";
+						}
+						else if (data.FirstCol == "Sprtr") {
+							Str += "<td colspan='" + colspanValue + "' class='separator'></td>";
+						}
+						else {
+							// first col = FirstCol data
+							if (firstColor == true) {
+								Str += "<td ColorCode=" + stringColorFirst + ">" + newDataFirst + "</td>";
+							}
+							else {
+								Str += "<td>" + data.FirstCol + "</td>";
+							}
+
+							// second col = LastCol && SymbolCol data
+							n = 0;
+							if (data.LastCol != null) {
+								for (const dataCol of data.LastCol) {
+									if (symbolColor[n] == true) { // with color
+										Str += "<td ColorCode=" + smallSymbolColor[n] + " width='16' style='text-align: left'>" + newDataSymbol[n] + "</td>";
+									}
+									else { // not color
+										Str += "<td width='16' style='text-align: center'>" + data.SymbolCol[n] + "</td>";
+									}
+									if (lastColor[n] == true) { // with color
+										if (newDataLast[n].indexOf("|") != -1) {
+											newDataLast[n] = newDataLast[n].replace("|", "");// replace fence
+										}
+										Str += "<td ColorCode=" + stringColorLast[n] + ">" + newDataLast[n] + "</td>";
+									}
+									else { // not color
+										if (data.FirstCol == obj[0].FirstCol) {
+											Str += "<td style='text-align: center'>" + data.LastCol[n] + "</td>";
+										}
+										else {
+											if (data.LastCol[n].indexOf("|") != -1) {
+												data.LastCol[n] = data.LastCol[n].replace("|", "");// replace fence
+											}
+											Str += "<td style='text-align: left'>" + data.LastCol[n] + "</td>";
+										}
+									}
+									n++
+								}
+							}
+
+							// separator
+							if (data.FirstCol == obj[0].FirstCol) {
+								Str += "<tr> <td colspan='" + colspanValue + "' class='separator'></td></tr>";
+							}
+						}
+						Str += "</tr>";
+					}
+				}
+				// separator at bottom
+				Str += "<tr> <td colspan='" + colspanValue + "' class='separator'></td></tr>";
+				Str += "</table>";
+				// space at bottom
+				Str += "<tr> <td colspan='" + colspanValue + "' onclick='changeNormalTextMode()' style='text-align: center'><img src='/or_logo.png' height='16' width='16'></img></td> </tr>";
+				Str += "</table>";
+				TrainDpu.innerHTML = Str;
+			}
+		}
+	}
+}
+
+function changePageColor() {
+	var buttonClicked = document.getElementById("buttonDN");
+	var bodyColor = document.getElementById("body");
+
+	if (buttonClicked.innerHTML == "Day"){
+		buttonClicked.innerHTML = "Night";
+		bodyColor.style.background = "black";
+		bodyColor.style.color =	"white";
+	}
+	else if (buttonClicked.innerHTML == "Night"){
+		buttonClicked.innerHTML = "Day"
+		bodyColor.style.background = "white";
+		bodyColor.style.color =	"black";
+	}
+};
+
+function changeNormalTextMode() {
+	normalTextMode = !normalTextMode;
+};
\ No newline at end of file
diff --git a/Source/RunActivity/Viewer3D/WebServices/Web/index.html b/Source/RunActivity/Viewer3D/WebServices/Web/index.html
index 9fc06bdab..36689fc7c 100644
--- a/Source/RunActivity/Viewer3D/WebServices/Web/index.html
+++ b/Source/RunActivity/Viewer3D/WebServices/Web/index.html
@@ -30,13 +30,14 @@ along with Open Rails.  If not, see <http://www.gnu.org/licenses/>.
 	<img src=or_logo.png/>
 	<h1>Open Rails - Web Interface</h1>
 	<ul>
-	  <li><a href="/TrackMonitor/index.html">Track Monitor (F4)</a></li>
-	  <li><a href="/TrainDriving/index.html">Train Driving (Ctrl+F5)</a></li>
-	  <li><a href="/TrackMonitorTrainDriving/index.html">Track Monitor and TrainDriving</a></li>
-	  <li><a href="/HUD/index.html">Head Up Display (F5)</a></li>
-	  <li><a href="/CabControls/index.html">Cab Controls</a></li>
-	  <li><a href="/Time/index.html">Time</a></li>
-	  <li><a href="/APISample/index.html">API Sample</a></li>
+		<li><a href="/TrackMonitor/index.html">Track Monitor (F4)</a></li>
+		<li><a href="/TrainDpu/index.html">Train Distribued Power (Shift+F9)</a></li>
+		<li><a href="/TrainDriving/index.html">Train Driving (Ctrl+F5)</a></li>
+		<li><a href="/TrackMonitorTrainDriving/index.html">Track Monitor and TrainDriving</a></li>
+		<li><a href="/HUD/index.html">Head Up Display (F5)</a></li>
+		<li><a href="/CabControls/index.html">Cab Controls</a></li>
+		<li><a href="/Time/index.html">Time</a></li>
+		<li><a href="/APISample/index.html">API Sample</a></li>
 	</ul>
 </body>
 </html>
diff --git a/Source/RunActivity/Viewer3D/WebServices/WebServer.cs b/Source/RunActivity/Viewer3D/WebServices/WebServer.cs
index bdf764511..37d7cb383 100644
--- a/Source/RunActivity/Viewer3D/WebServices/WebServer.cs
+++ b/Source/RunActivity/Viewer3D/WebServices/WebServer.cs
@@ -234,6 +234,11 @@ IEnumerable<string> GetValues()
         public IEnumerable<TrainDrivingDisplay.ListLabel> TrainDrivingDisplay([QueryField] bool normalText) => Viewer.TrainDrivingDisplayList(normalText);
         #endregion
 
+        #region /API/TRAINDPUDISPLAY
+        [Route(HttpVerbs.Get, "/TRAINDPUDISPLAY")]
+        public IEnumerable<TrainDpuDisplay.ListLabel> TrainDpuDisplay([QueryField] bool normalText) => Viewer.TrainDpuDisplayList(normalText);
+        #endregion
+
         // Note: to see the JSON, use "localhost:2150/API/CABCONTROLS" - Beware: case matters
         // Note: to run the webpage, use "localhost:2150/CabControls/index.html" - case doesn't matter
         // or use "localhost:2150/CabControls/"
